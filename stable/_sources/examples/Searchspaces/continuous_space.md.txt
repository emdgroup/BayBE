# Creating Continuous Search Spaces

This example illustrates several ways to create continuous spaces space.

## Imports


```python
import numpy as np
```


```python
from baybe.parameters import NumericalContinuousParameter
from baybe.searchspace import SearchSpace, SubspaceContinuous
```

## Settings

We begin by defining the continuous parameters that span our space:


```python
DIMENSION = 4
BOUNDS = (-1, 1)
```


```python
parameters = [
    NumericalContinuousParameter(name=f"x_{k+1}", bounds=BOUNDS)
    for k in range(DIMENSION)
]
```

From these parameter objects, we can now construct a continuous subspace.
Let us draw some samples from it and verify that they are within the bounds:


```python
subspace = SubspaceContinuous(parameters)
samples = subspace.sample_uniform(10)
print(samples)
assert np.all(samples >= BOUNDS[0]) and np.all(samples <= BOUNDS[1])
```

            x_1       x_2       x_3       x_4
    0  0.585802 -0.696210 -0.494911  0.589452
    1  0.915865 -0.568965 -0.390311  0.707355
    2 -0.232259 -0.866480  0.957076 -0.113741
    3 -0.988982 -0.284253 -0.178969 -0.870455
    4 -0.910076 -0.479991 -0.110444 -0.944319
    5  0.427690 -0.010731  0.960561 -0.437124
    6 -0.442968  0.794927  0.066080 -0.541045
    7  0.512025  0.237318 -0.817373  0.701922
    8  0.436030  0.389604 -0.338939 -0.822252
    9  0.832923  0.469778  0.182476  0.112189


There are several ways we can turn the above objects into a search space.
This provides a lot of flexibility depending on the context:


```python
# Using conversion:
searchspace1 = SubspaceContinuous(parameters).to_searchspace()
```


```python
# Explicit attribute assignment via the regular search space constructor:
searchspace2 = SearchSpace(continuous=SubspaceContinuous(parameters))
```


```python
# Using an alternative search space constructor:
searchspace3 = SearchSpace.from_product(parameters=parameters)
```

No matter which version we choose, we can be sure that the resulting search space
objects are equivalent:


```python
assert searchspace1 == searchspace2 == searchspace3
```
